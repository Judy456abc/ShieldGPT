import os
import random
# import json
import pandas as pd

random.seed(0)

attack_dict = {
    "goldeneye": {
        "description": "GoldenEye attack. It is a type of DoS attack that exhausts avaliable TCP socks of the target server by establishing a legitimate HTTP connection and then requires only a few hundred requests at long-term and regular intervals.",
        "name": "GoldenEye",
    },
    "hulk": {
        "description": "Hulk (HTTP Unbearable Load King) attack. It is a type of DoS attack that aims to overwhelm a targeted web server or application with by sending a large number of HTTP GET requests, rendering it unavailable to legitimate users. " + 
            "And attackers attempts to evade detection by employing simple obfuscation techniques, such as using different user-agent strings and referrers.",
        "name": "Hulk",
    },
    "rudy": {
        "description": "RUDY (R U Dead Yet) attack. It is a type of DoS attack that targets web applications by exploiting the HTTP POST method." +
            "Unlike other DoS attacks that flood the server with a large amount of traffic, RUDY is more subtle and focuses on holding the server's resources for as long as possible by sending partial HTTP POST requests to the server",
        "name": "RUDY",
    },
    "slowbody2": {
        "description": "slow-body attack generated by Slowhttptest tool. It is a type of DoS attack that sends incomplete HTTP POST requests with a large Content-Length value to the server and keeps the connection open for as long as possible, which can exhaust the server's resources.",
        "name": "slow-body",
    },
    "slowheaders": {
        # "description": "slow-headers attack generated by Slowhttptest tool. It is a type of DoS attack that sends HTTP requests with incomplete headers and keeps the server wait for a long time, which can exhaust the server's resources.",
        "description": "slow-headers attack generated by Slowhttptest tool. It is a type of DoS attack and the attacker sends HTTP requests in pieces as slow as possible, so the server keeps the connections open, waiting for the headers to arrive. This can exhaust the server's resources, causing a denial of service.",
        "name": "slow-headers",
    },
    "slowloris": {
        # "description": "slowloris attack. It is a type of DoS attack that aims to keep a web server's resources occupied by sending HTTP requests with incomplete headers and then keep the connection open for as long as possible.",
        "description": "slowloris attack. It is a type of DoS attack and the attacker tries to keep many connections to the target web server open and hold them open as long as possible. It accomplishes this by creating connections to the target server, but sending only a partial request.",
        "name": "slowloris",
    },
    "slowread": {
        "description": "slow-read attack generated by Slowhttptest tool. It is a type of DoS attack that sends HTTP requests and then slowly reads the server's response, which can exhaust the server's resources.",
        "name": "slow-read",
    }
}

device_dict = {
    "cisco": {
        "description": "an ordinary Cisco router",
    },
    "snort": {
        "description": "a Snort IPS",
    },
    "iptables": {
        "description": "a Linux server with iptables",
    },
}

DEVICE_NAME = "iptables"
NUM_SAMPLE_PER_ATTACK = 3
ADD_ANALYSIS = False
res_list = []
for attack in ["goldeneye", "hulk", "rudy", "slowbody2", "slowheaders", "slowloris", "slowread"]:
    filenames = list(filter(lambda x: x.endswith(".json"), 
                            os.listdir(f"../flow_pcap_5_tuple/test/{attack}")))
    sample_filenames = random.sample(filenames, NUM_SAMPLE_PER_ATTACK)
    for sample_filename in sample_filenames:
        with open(f"../flow_pcap_5_tuple/test/{attack}/{sample_filename}", "r") as f:
            text = f.read()
        if ADD_ANALYSIS:
            prompt = f"""{text}
The above are traffic statistical characteristics and the first 5 packets' original information of the {attack_dict[attack]["description"]}. 
First, you are required to analyze the traffic and explain why it is a {attack_dict[attack]["name"]} attack.
Then, suppose you are at {device_dict[DEVICE_NAME]["description"]}. Please propose some defense strategies to mitigate this {attack_dict[attack]["name"]} attack. 
Note that your advice should be as specific as possible, and you need to provide detailed configuration codes based on the above traffic characteristics for each strategy. 
"""
        else:
            prompt = f"""{text}
The above are traffic statistical characteristics and the first 5 packets' original information of the {attack_dict[attack]["description"]}. 
Suppose you are at {device_dict[DEVICE_NAME]["description"]}. Please propose some defense strategies to mitigate this {attack_dict[attack]["name"]} attack. 
Note that your advice should be as specific as possible, and you need to provide detailed configuration codes based on the above traffic characteristics for each strategy. 
"""
        res_list.append({
            "prompt": prompt,
            "label": attack,
        })
df = pd.DataFrame(res_list)
df.to_csv(f"../output/attack_prompt_0529_{DEVICE_NAME}_a={ADD_ANALYSIS}.csv", index=False)

# with open("attack_prompt.json", "w") as f:
#     json.dump(res, f, indent=2)